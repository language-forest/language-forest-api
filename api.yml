openapi: 3.1.0
info:
  title: Sample API
  version: 1.0.0

paths:
  /auth/google:
    post:
      tags:
        - auth
      summary: "Google 로그인을 요청합니다."
      operationId: "googleLogin"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GoogleLoginRequest"
      responses:
        "200":
          description: "JWT 토큰 발급 성공"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenDto"

  /auth/refresh:
    post:
      tags:
        - auth
      summary: "서버에서 발급한 refresh token을 통해 accessToken을 다시 받아옵니다."
      operationId: "authRefresh"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: "리프레시 토큰"
              required:
                - refreshToken
      responses:
        "200":
          description: "JWT 토큰 발급 성공"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenDto"

  /auth/dummy:
    post:
      tags:
        - auth
      summary: "dummy 로그인을 요청합니다."
      operationId: "dummyLogin"
      responses:
        "200":
          description: "JWT 토큰 발급 성공"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenDto"

  /user/dummy:
    post:
      tags:
        - user
      summary: "더미 유저를 생성합니다."
      operationId: "createDummy"
      responses:
        "201":
          description: "더미 유저 생성 성공"

  /user:
    post:
      tags:
        - user
      summary: "새로운 유저를 생성합니다."
      operationId: "createUser"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
      responses:
        "201":
          description: "유저 생성 성공"

  /user/me:
    get:
      tags:
        - user
      summary: "jwt 기반으로 유저의 정보를 가져옵니다."
      operationId: "getUserMe"
      responses:
        "200":
          description: "유저 정보 반환 성공"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"

  /study:
    post:
      tags:
        - study
      summary: "새로운 스터디를 생성합니다."
      operationId: "createStudy"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateStudyRequest"
      responses:
        "201":
          description: "스터디 생성 성공"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateStudyResponse"

  /study/{studyId}:
    get:
      tags:
        - study
      summary: "학습 결과 정보를 가져옵니다."
      parameters:
        - name: studyId
          in: path
          description: "The ID of the study"
          required: true
          schema:
            type: string
            format: uuid
      operationId: getStudy
      responses:
        "200":
          description: "학습 결과 정보 반환 성공"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudyResponse"

  /study/{studyId}/summary:
    post:
      tags:
        - study
      summary: "유저 일기를 요약하고 태그, 이모티콘 등을 만들어 제공합니다."
      parameters:
        - name: studyId
          in: path
          description: "The ID of the study"
          required: true
          schema:
            type: string
            format: uuid
      operationId: createStudySummary
      responses:
        "201":
          description: "유저 일기 요약, 메시지, 태그, 이모티콘 생성 성공"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateStudySummaryResponse"

  /study/{studyId}/practice:
    post:
      tags:
        - study
      summary: "유저가 선택한 태그를 저장하고 유저가 선택했던 레벨과 개수, 언어에 맞는 문제를 생성해 제공합니다."
      parameters:
        - name: studyId
          in: path
          description: "The ID of the study"
          required: true
          schema:
            type: string
            format: uuid
      operationId: createStudyPractice
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                studySummaryId:
                  type: string
                  format: uuid
                selectedTag:
                  type: string
                  description: "제시된 태그들 중 유저가 선택한 태그"
              required:
                - studySummaryId
                - selectedTag
      responses:
        "201":
          description: "태그 저장 및 문제 생성 성공"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateStudyPracticeResponse"
    put:
      tags:
        - study
      summary: "학습 완료 후 평균 점수 산정 및 학습 상태 변경"
      parameters:
        - name: studyId
          in: path
          description: "The ID of the study"
          required: true
          schema:
            type: string
            format: uuid
      operationId: completeStudyPractice
      responses:
        "201":
          description: "학습 완료 성공"

  /study/{studyId}/practice/{studyPracticeId}:
    put:
      tags:
        - study
      summary: "문제에 맞는 유저의 답변을 받아 정답, 점수, 팁(피드백) 제공"
      parameters:
        - name: studyId
          in: path
          description: "The ID of the study"
          required: true
          schema:
            type: string
            format: uuid
        - name: studyPracticeId
          in: path
          description: "The ID of the study practice"
          required: true
          schema:
            type: string
            format: uuid
      operationId: updateStudyPractice
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateStudyPracticeRequest"
      responses:
        "201":
          description: "정답, 점수, 팁(피드백) 생성 성공"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateStudyPracticeResponse"

  /study/{studyId}/practice/{studyPracticeId}/retry:
    put:
      tags:
        - study
      summary: "재시도를 위해 문제에 맞는 유저의 답변을 받아 정답(기존에 생성됨), 점수, 팁(피드백) 제공"
      parameters:
        - name: studyId
          in: path
          description: "The ID of the study"
          required: true
          schema:
            type: string
            format: uuid
        - name: studyPracticeId
          in: path
          description: "The ID of the study practice"
          required: true
          schema:
            type: string
            format: uuid
      operationId: updateStudyPracticeRetry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateStudyPracticeRequest"
      responses:
        "201":
          description: "재시도를 위한 점수, 팁(피드백) 생성 성공"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateStudyPracticeResponse"

components:
  schemas:
    # -----------------------------------------------------------
    # 공통 Timestamp(읽기 전용) : createdAt, updatedAt, deletedAt
    # -----------------------------------------------------------
    Timestamped:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          description: "생성 일시 (DB 자동)"
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          description: "수정 일시 (DB 자동)"
          readOnly: true
        deletedAt:
          type: string
          format: date-time
          description: "삭제 일시 (소프트 딜리트)"
          readOnly: true

    # -----------------------------------------------------------
    # Enum 정의
    # -----------------------------------------------------------
    LanguageEnum:
      type: string
      enum: [JA, ZH, FR, ES, DE, EN, KO]
      description: "일본어, 중국어, 프랑스어, 스페인어, 독일어, 영어, 한국어"

    GenderEnum:
      type: string
      enum: [MALE, FEMALE, OTHER]
      description: "유저 성별 (MALE/FEMALE/OTHER)"

    LevelEnum:
      type: string
      enum: [A, B, C, D, E]
      description: "학습 수준 (A/B/C/D/E)"

    NotificationEnum:
      type: string
      enum: [DAILY_STUDY]
      description: "push 알림 타입입니다."

    NotificationStatusEnum:
      type: string
      enum: [SUCCESS, FAIL, SCHEDULE, CANCEL]
      description: "push 상태를 관리하는 enum입니다."

    PointEnum:
      type: string
      enum: [DAILY_STUDY]
      description: "유저가 포인트에 대한 조건을 구분하는 enum입니다."

    VoiceTypeEnum:
      type: string
      enum: [A, B, C]
      description: "ai 목소리에 맵핑되는 enum입니다."

    InputTypeEnum:
      type: string
      enum: [ SPEAKING, WRITING ]
      description: "유저가 study를 위해 문장을 넣는 방식을 구분하는 enum입니다."

    StudyStatusEnum:
      type: string
      enum: [PENDING, COMPLETED]
      description: "학습의 완료 여부를 구분하는 enum입니다."

    PracticeTypeEnum:
      type: string
      enum: [FIRST, RETRY]
      description: "practice가 초기 시도인지 재시도인지 구분하는 enum입니다."

    # -----------------------------------------------------------
    # BaseUser : UserEntity가 가진 주요 필드
    # (nickname, language 등을 포함)
    # -----------------------------------------------------------
    BaseUser:
      type: object
      properties:
        uid:
          type: string
          format: uuid
        nickname:
          type: string
          description: "유저 닉네임 (필수)"
        language:
          $ref: "#/components/schemas/LanguageEnum"
          description: "대표 언어 (필수)"
      required: [uid, nickname, language]

    # -----------------------------------------------------------
    # BaseUserInfo : UserInfoEntity가 가진 필드들
    # (모두 optional로 가정)
    # -----------------------------------------------------------
    BaseUserInfo:
      type: object
      properties:
        uid:
          type: string
          format: uuid
        gender:
          $ref: "#/components/schemas/GenderEnum"
          description: "옵션 - 성별"
          nullable: true
        yearOfBirth:
          type: integer
          format: int32
          description: "옵션 - 태어난 해"
          nullable: true
        occupation:
          type: string
          description: "옵션 - 직업"
          nullable: true
        interest:
          type: array
          items:
            type: string
          description: "옵션 - 관심사"
          nullable: true
        purpose:
          type: string
          description: "옵션 - 학습 목적"
          nullable: true
        languageSecond:
          $ref: "#/components/schemas/LanguageEnum"
          description: "옵션 - 2차 언어 (ex. JP)"
          nullable: true
        studyPlace:
          type: string
          description: "옵션 - 학습 장소 (ex. ONLINE, OFFLINE)"
          nullable: true
        mbti:
          type: string
          description: "옵션 - MBTI"
          nullable: true
      required: [uid]

    # -----------------------------------------------------------
    # BaseUserStudyInfo : UserStudyInfoEntity가 가진 필드들
    # -----------------------------------------------------------
    BaseUserStudyInfo:
      type: object
      properties:
        id:
          type: string
          format: uuid
        uid:
          type: string
          format: uuid
        level:
          $ref: "#/components/schemas/LevelEnum"
          description: "학습 난이도"
        voiceType:
          $ref: "#/components/schemas/VoiceTypeEnum"
          description: "ai 목소리 타입"
        language:
          $ref: "#/components/schemas/LanguageEnum"
          description: "지금 내가 학습하는 언어"
        streakDays:
          type: integer
          format: int32
          description: "연속 학습 일 수"
        sentenceAmount:
          type: integer
          format: int32
          description: "학습할 문장 수"
      required:
        [id, uid, level, voiceType, language, streakDays, sentenceAmount]

    # -----------------------------------------------------------
    # BaseUserPoint : UserStudyPointEntity가 가진 필드들
    # -----------------------------------------------------------
    BaseUserPoint:
      type: object
      properties:
        uid:
          type: string
          format: uuid
        amount:
          type: integer
          description: "유저 포인트"
      required: [uid, amount]

    # -----------------------------------------------------------
    # BaseUserNotification : UserNotificationEntity가 가진 필드들
    # -----------------------------------------------------------
    BaseUserNotification:
      type: object
      properties:
        uid:
          type: string
          format: uuid
        notificationPreference:
          $ref: "#/components/schemas/NotificationEnum"
        cron:
          type: string
      required: [uid, notificationPreference, cron]

    # -----------------------------------------------------------
    # BaseStudy : StudyEntity가 가진 필드들
    # -----------------------------------------------------------
    BaseStudy:
      type: object
      properties:
        id:
          type: string
          format: uuid
        uid:
          type: string
          format: uuid
        userStudyInfoId:
          type: string
          format: uuid
        voiceType:
          $ref: "#/components/schemas/VoiceTypeEnum"
          description: "ai 목소리 타입"
        level:
          $ref: "#/components/schemas/LevelEnum"
          description: "학습 난이도"
        sentenceAmount:
          type: integer
          format: int32
          description: "학습할 문장 수"
        language:
          $ref: "#/components/schemas/LanguageEnum"
          description: "지금 내가 학습하는 언어"
        startQuestion:
          type: string
          description: "시작 질문"
        inputType:
          $ref: "#/components/schemas/InputTypeEnum"
          description: "문장 입력 타입"
        story:
          type: string
          description: "유저의 하루 일기"
        storyVoicePath:
          type: string
          description: "유저의 하루 일기 음성 파일 경로"
          nullable: true
        averageScore:
          type: number
          format: double
          description: "전체 점수 평균"
        point:
          type: integer
          format: int32
          description: "학습 완료로 획득한 재화의 양"
        studyStatus:
          $ref: "#/components/schemas/StudyStatusEnum"
          description: "학습 상태"

    # -----------------------------------------------------------
    # BaseStudySummary : StudySummaryEntity가 가진 필드들
    # -----------------------------------------------------------
    BaseStudySummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        studyId:
          type: string
          format: uuid
        summary:
          type: string
          description: "하루 일지 한 문장 요약"
        message:
          type: string
          description: "하루 일지 150자 이내 요약"
        emoji:
          type: string
          description: "하루 일지 기반 이모티콘"
        tags:
          type: array
          description: "하루 일지 기반 4가지 키워드"
          items:
            type: string
        selectedTag:
          type: string
          description: "유저가 선택한 키워드"

    # -----------------------------------------------------------
    # BaseStudyPractice : StudyPracticeEntity가 가진 필드들
    # -----------------------------------------------------------
    BaseStudyPractice:
      type: object
      properties:
        id:
          type: string
          format: uuid
        studyId:
          type: string
          format: uuid
        problemNumber:
          type: integer
          description: "문제 번호"
        problem:
          type: string
          description: "문제"
        correctAnswer:
          type: string
          description: "정답"
        myAnswer:
          type: string
          description: "유저의 답변"
        myAnswerVoicePath:
          type: string
          description: "유저의 답변 음성 파일 경로"
          nullable: true
        tip:
          type: string
          description: "팁(피드백)"
        score:
          type: integer
          description: "점수"

    # -----------------------------------------------------------
    # 유저 정보중 업데이트 가능한 것들을 모두 널러블로 열어둡니다.
    # -----------------------------------------------------------
    UpdateUser:
      type: object
      properties:
        nickname:
          type: string
          description: "유저 닉네임 (필수)"
        language:
          $ref: "#/components/schemas/LanguageEnum"
          description: "대표 언어 (필수)"

    # -----------------------------------------------------------
    # 유저 정보중 업데이트 가능한 것들을 모두 널러블로 열어둡니다.
    # -----------------------------------------------------------
    UpdateUserInfo:
      type: object
      properties:
        gender:
          $ref: "#/components/schemas/GenderEnum"
          description: "옵션 - 성별"
        yearOfBirth:
          type: integer
          format: int32
          description: "옵션 - 태어난 해"
        occupation:
          type: string
          description: "옵션 - 직업"
        interest:
          type: array
          items:
            type: string
          description: "옵션 - 관심사"
        purpose:
          type: string
          description: "옵션 - 학습 목적"
        languageSecond:
          $ref: "#/components/schemas/LanguageEnum"
          description: "옵션 - 2차 언어 (ex. JP)"
        studyPlace:
          type: string
          description: "옵션 - 학습 장소 (ex. ONLINE, OFFLINE)"
        mbti:
          type: string
          description: "옵션 - MBTI"

    # -----------------------------------------------------------
    # 유저 학습정보 중 업데이트 가능한 것들을 열어둡니다.
    # -----------------------------------------------------------
    CreateUserStudyInfo:
      type: object
      properties:
        level:
          $ref: "#/components/schemas/LevelEnum"
          description: "학습 난이도"
        language:
          $ref: "#/components/schemas/LanguageEnum"
          description: "학습할 언어"
      required: [level, language]

    # -----------------------------------------------------------
    # 유저 노티피케이션을 생성합니다.
    # -----------------------------------------------------------
    CreateUserNotification:
      type: object
      properties:
        notificationPreference:
          $ref: "#/components/schemas/NotificationEnum"
        cron:
          type: string
      required: [notificationPreference, cron]

    # -----------------------------------------------------------
    # CreateUserRequest : User 생성 요청
    #  => BaseUser + BaseUserInfo 를 상속(allOf)해서 합치기
    # -----------------------------------------------------------
    CreateUserRequest:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/UpdateUser"
        userInfo:
          $ref: "#/components/schemas/UpdateUserInfo"
        userStudyInfo:
          $ref: "#/components/schemas/CreateUserStudyInfo"
        userNotification:
          $ref: "#/components/schemas/CreateUserNotification"
      required: [user, userInfo, userStudyInfo, userNotification]

    # -----------------------------------------------------------
    # 스터디를 생성합니다.
    # -----------------------------------------------------------
    CreateStudy:
      type: object
      properties:
        userStudyInfoId:
          type: string
          format: uuid
        startQuestion:
          type: string
          description: "시작 질문"
        inputType:
          $ref: "#/components/schemas/InputTypeEnum"
          description: "문장 입력 타입"
        story:
          type: string
          description: "유저의 하루 일기"
        storyVoicePath:
          type: string
          description: "유저의 하루 일기 음성 파일 경로"
          nullable: true
      required: [ userStudyInfoId, startQuestion, inputType, story ]

    # -----------------------------------------------------------
    # CreateStudyRequest : Study 생성 요청
    # -----------------------------------------------------------
    CreateStudyRequest:
      type: object
      properties:
        study:
          $ref: "#/components/schemas/CreateStudy"
      required: [ study ]

    # -----------------------------------------------------------
    # StudyPractice를 생성합니다.
    # -----------------------------------------------------------
    UpdateStudyPractice:
      type: object
      properties:
        myAnswer:
          type: string
          description: "유저의 답변"
        myAnswerVoicePath:
          type: string
          description: "유저의 답변 음성 파일 경로"
          nullable: true
      required: [ myAnswer ]

    # -----------------------------------------------------------
    # UpdateStudyPracticeRequest : StudyPractice 수정 요청
    # -----------------------------------------------------------
    UpdateStudyPracticeRequest:
      type: object
      properties:
        studyPractice:
          $ref: "#/components/schemas/UpdateStudyPractice"
      required: [ studyPractice ]

    # -----------------------------------------------------------
    # UserResponse : User 조회 응답
    #  => Timestamped + BaseUser + BaseUserInfo
    #  => uid 같은 PK를 추가할 수도 있음
    # -----------------------------------------------------------
    UserResponse:
      allOf:
        - type: object
          properties:
            user:
              $ref: "#/components/schemas/BaseUser"
        - type: object
          properties:
            userInfo:
              $ref: "#/components/schemas/BaseUserInfo"
        - type: object
          properties:
            userStudyInfo:
              $ref: "#/components/schemas/BaseUserStudyInfo"
        - type: object
          properties:
            userPoint:
              $ref: "#/components/schemas/BaseUserPoint"

    # -----------------------------------------------------------
    # StudyResponse : Study 조회 응답
    #  => BaseStudy + BaseStudySummary + Array<BaseStudyPractice>
    # -----------------------------------------------------------
    StudyResponse:
      allOf:
        - type: object
          properties:
            study:
              $ref: "#/components/schemas/BaseStudy"
        - type: object
          properties:
            studySummary:
              $ref: "#/components/schemas/BaseStudySummary"
        - type: object
          properties:
            studyPractices:
              type: array
              items:
                type: object
                $ref: "#/components/schemas/BaseStudyPractice"

    # -----------------------------------------------------------
    # CreateStudyResponse : Study 생성 응답
    # -----------------------------------------------------------
    CreateStudyResponse:
      properties:
        studyId:
          type: string
          format: uuid

    # -----------------------------------------------------------
    # CreateStudySummaryResponse : StudySummary 생성 응답
    # -----------------------------------------------------------
    CreateStudySummaryResponse:
      properties:
        studySummaryId:
          type: string
          format: uuid
        summary:
          type: string
          description: "하루 일지 한 문장 요약"
        message:
          type: string
          description: "하루 일지 150자 이내 요약"
        emoji:
          type: string
          description: "하루 일지 기반 이모티콘"
        tags:
          type: array
          description: "하루 일지 기반 4가지 키워드"
          items:
            type: string

    # -----------------------------------------------------------
    # CreateStudyPracticeResponse : StudyPractice 생성 응답
    # -----------------------------------------------------------
    CreateStudyPracticeResponse:
      properties:
        studyPractices:
          type: array
          items:
            type: object
            properties:
              studyPracticeId:
                type: string
                format: uuid
              problemNumber:
                type: integer
                description: "문제 번호"
              problem:
                type: string
                description: "문제"

    # -----------------------------------------------------------
    # UpdateStudyPracticeResponse : StudyPractice 수정 응답
    # -----------------------------------------------------------
    UpdateStudyPracticeResponse:
      properties:
        studyPractice:
          type: object
          properties:
            problemNumber:
              type: integer
              description: "문제 번호"
            problem:
              type: string
              description: "문제"
            myAnswer:
              type: string
              description: "유저 답변"
            myAnswerVoicePath:
              type: string
              description: "유저 답변 링크"
            correctAnswer:
              type: string
              description: "정답"
            score:
              type: integer
              description: "점수"
            tip:
              type: string
              description: "팁(피드백)"

    # -----------------------------------------------------------
    # GoogleLoginRequest :
    #  => googleId, email, name(옵션) + (BaseUser) nickname/language 필수
    # -----------------------------------------------------------
    GoogleLoginRequest:
      type: object
      properties:
        language:
          type: string
          description: "디바이스의 언어를 가져옵니다."
        token:
          $ref: "#/components/schemas/TokenDto"
      required: [language, token]

    # -----------------------------------------------------------
    # JWT 토큰 DTO
    # -----------------------------------------------------------
    TokenDto:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
      required: [accessToken]
