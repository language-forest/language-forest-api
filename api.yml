openapi: 3.0.3
info:
  title: Sample API
  version: 1.0.0

paths:
  /auth/google:
    post:
      tags:
        - auth
      summary: "Google 로그인을 요청합니다 (nickname, language 필수)."
      operationId: "googleLogin"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GoogleLoginRequest"
      responses:
        "200":
          description: JWT 토큰 발급 성공
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenDto"

  /auth/refresh:
    post:
      tags:
        - auth
      summary: "서버에서 발급한 refresh token을 통해 accessToken을 다시 받아옵니다."
      operationId: "authRefresh"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: "리프레시 토큰"
              required:
                - refreshToken
      responses:
        "200":
          description: JWT 토큰 발급 성공
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenDto"

  /user:
    post:
      tags:
        - user
      summary: "새로운 유저를 생성합니다."
      operationId: "createUser"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
      responses:
        "201":
          description: "유저 생성 성공"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"

components:
  schemas:
    # -----------------------------------------------------------
    # 공통 Timestamp(읽기 전용) : createdAt, updatedAt, deletedAt
    # -----------------------------------------------------------
    Timestamped:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          description: "생성 일시 (DB 자동)"
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          description: "수정 일시 (DB 자동)"
          readOnly: true
        deletedAt:
          type: string
          format: date-time
          description: "삭제 일시 (소프트 딜리트)"
          readOnly: true

    # -----------------------------------------------------------
    # Enum 정의
    # -----------------------------------------------------------
    GenderEnum:
      type: string
      enum: [MALE, FEMALE, OTHER]
      description: "유저 성별 (MALE/FEMALE/OTHER)"

    LevelEnum:
      type: string
      enum: [A, B, C, D, E]
      description: "학습 수준 (A/B/C/D/E)"

    NotificationEnum:
      type: string
      enum: [DAILY_STUDY]
      description: "push 알림 타입입니다."

    NotificationStatusEnum:
      type: string
      enum: [SUCCESS, FAIL, SCHEDULE, CANCEL]
      description: "push 상태를 관리하는 enum입니다."

    PointEnum:
      type: string
      enum: [DAILY_STUDY]
      description: "유저가 포인트에 대한 조건을 구분하는 enum입니다."

    VoiceTypeEnum:
      type: string
      enum: [A, B, C]
      description: "ai 목소리에 맵핑되는 enum입니다."

    # -----------------------------------------------------------
    # BaseUser : UserEntity가 가진 주요 필드
    # (nickname, language 등을 포함)
    # -----------------------------------------------------------
    BaseUser:
      type: object
      properties:
        uid:
          type: string
          format: uuid
        nickname:
          type: string
          description: "유저 닉네임 (필수)"
        language:
          type: string
          description: "대표 언어 (필수)"
      required:
        - nickname
        - language

    # -----------------------------------------------------------
    # BaseUserInfo : UserInfoEntity가 가진 필드들
    # (모두 optional로 가정)
    # -----------------------------------------------------------
    BaseUserInfo:
      type: object
      properties:
        uid:
          type: string
          format: uuid
        gender:
          $ref: "#/components/schemas/GenderEnum"
          description: "옵션 - 성별"
          nullable: true
        yearOfBirth:
          type: integer
          format: int32
          description: "옵션 - 태어난 해"
          nullable: true
        occupation:
          type: string
          description: "옵션 - 직업"
          nullable: true
        interest:
          type: string
          description: "옵션 - 관심사"
          nullable: true
        purpose:
          type: string
          description: "옵션 - 학습 목적"
          nullable: true
        languageSecond:
          type: string
          description: "옵션 - 2차 언어 (ex. JP)"
          nullable: true
        studyPlace:
          type: string
          description: "옵션 - 학습 장소 (ex. ONLINE, OFFLINE)"
          nullable: true
        mbti:
          type: string
          description: "옵션 - MBTI"
          nullable: true

    # -----------------------------------------------------------
    # BaseUserStudyInfo : UserStudyInfoEntity가 가진 필드들
    # -----------------------------------------------------------
    BaseUserStudyInfo:
      type: object
      properties:
        id:
          type: string
          format: uuid
        uid:
          type: string
          format: uuid
        level:
          $ref: "#/components/schemas/LevelEnum"
          description: "학습 난이도"
        voiceType:
          $ref: "#/components/schemas/VoiceTypeEnum"
          description: "ai 목소리 타입"
        sentenceAmount:
          type: integer
          format: int32
          description: "학습할 문장 수"

    # -----------------------------------------------------------
    # CreateUserRequest : User 생성 요청
    #  => BaseUser + BaseUserInfo 를 상속(allOf)해서 합치기
    # -----------------------------------------------------------
    CreateUserRequest:
      type: object
      properties:
        user:
          allOf:
            - $ref: "#/components/schemas/BaseUser"
            - type: object
              properties:
                uid:
                  readOnly: true # uid는 요청에서 제외됨
        userInfo:
          allOf:
            - $ref: "#/components/schemas/BaseUserInfo"
            - type: object
              properties:
                uid:
                  readOnly: true # uid는 요청에서 제외됨
        userStudyInfo:
          allOf:
            - $ref: "#/components/schemas/BaseUserStudyInfo"
            - type: object
              properties:
                id:
                  readOnly: true # id는 요청에서 제외됨
                level:
                  $ref: "#/components/schemas/LevelEnum"
              required:
                - level
              additionalProperties: false
      required:
        - user
        - userInfo
        - userStudyInfo

    # -----------------------------------------------------------
    # UserResponse : User 조회 응답
    #  => Timestamped + BaseUser + BaseUserInfo
    #  => uid 같은 PK를 추가할 수도 있음
    # -----------------------------------------------------------
    UserResponse:
      allOf:
        - type: object
          properties:
            user:
              $ref: "#/components/schemas/BaseUser"
        - type: object
          properties:
            userInfo:
              $ref: "#/components/schemas/BaseUserInfo"
        - $ref: "#/components/schemas/Timestamped"

    # -----------------------------------------------------------
    # GoogleLoginRequest :
    #  => googleId, email, name(옵션) + (BaseUser) nickname/language 필수
    # -----------------------------------------------------------
    GoogleLoginRequest:
      allOf:
        - type: object
          properties:
            user:
              $ref: "#/components/schemas/TokenDto"
        - type: object
          properties:
            token:
              $ref: "#/components/schemas/TokenDto"

    # -----------------------------------------------------------
    # JWT 토큰 DTO
    # -----------------------------------------------------------
    TokenDto:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
      required:
        - accessToken
